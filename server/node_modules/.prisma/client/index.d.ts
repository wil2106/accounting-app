
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Accountant
 * 
 */
export type Accountant = $Result.DefaultSelection<Prisma.$AccountantPayload>
/**
 * Model Client
 * 
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model FiscalMonth
 * 
 */
export type FiscalMonth = $Result.DefaultSelection<Prisma.$FiscalMonthPayload>
/**
 * Model BankOperation
 * 
 */
export type BankOperation = $Result.DefaultSelection<Prisma.$BankOperationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accountants
 * const accountants = await prisma.accountant.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accountants
   * const accountants = await prisma.accountant.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.accountant`: Exposes CRUD operations for the **Accountant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accountants
    * const accountants = await prisma.accountant.findMany()
    * ```
    */
  get accountant(): Prisma.AccountantDelegate<ExtArgs>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs>;

  /**
   * `prisma.fiscalMonth`: Exposes CRUD operations for the **FiscalMonth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FiscalMonths
    * const fiscalMonths = await prisma.fiscalMonth.findMany()
    * ```
    */
  get fiscalMonth(): Prisma.FiscalMonthDelegate<ExtArgs>;

  /**
   * `prisma.bankOperation`: Exposes CRUD operations for the **BankOperation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BankOperations
    * const bankOperations = await prisma.bankOperation.findMany()
    * ```
    */
  get bankOperation(): Prisma.BankOperationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Accountant: 'Accountant',
    Client: 'Client',
    FiscalMonth: 'FiscalMonth',
    BankOperation: 'BankOperation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'accountant' | 'client' | 'fiscalMonth' | 'bankOperation'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Accountant: {
        payload: Prisma.$AccountantPayload<ExtArgs>
        fields: Prisma.AccountantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountantFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountantFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountantPayload>
          }
          findFirst: {
            args: Prisma.AccountantFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountantFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountantPayload>
          }
          findMany: {
            args: Prisma.AccountantFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountantPayload>[]
          }
          create: {
            args: Prisma.AccountantCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountantPayload>
          }
          createMany: {
            args: Prisma.AccountantCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountantDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountantPayload>
          }
          update: {
            args: Prisma.AccountantUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountantPayload>
          }
          deleteMany: {
            args: Prisma.AccountantDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountantUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountantUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountantPayload>
          }
          aggregate: {
            args: Prisma.AccountantAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccountant>
          }
          groupBy: {
            args: Prisma.AccountantGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountantGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountantCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountantCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      FiscalMonth: {
        payload: Prisma.$FiscalMonthPayload<ExtArgs>
        fields: Prisma.FiscalMonthFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FiscalMonthFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FiscalMonthPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FiscalMonthFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FiscalMonthPayload>
          }
          findFirst: {
            args: Prisma.FiscalMonthFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FiscalMonthPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FiscalMonthFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FiscalMonthPayload>
          }
          findMany: {
            args: Prisma.FiscalMonthFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FiscalMonthPayload>[]
          }
          create: {
            args: Prisma.FiscalMonthCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FiscalMonthPayload>
          }
          createMany: {
            args: Prisma.FiscalMonthCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FiscalMonthDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FiscalMonthPayload>
          }
          update: {
            args: Prisma.FiscalMonthUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FiscalMonthPayload>
          }
          deleteMany: {
            args: Prisma.FiscalMonthDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FiscalMonthUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FiscalMonthUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FiscalMonthPayload>
          }
          aggregate: {
            args: Prisma.FiscalMonthAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFiscalMonth>
          }
          groupBy: {
            args: Prisma.FiscalMonthGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FiscalMonthGroupByOutputType>[]
          }
          count: {
            args: Prisma.FiscalMonthCountArgs<ExtArgs>,
            result: $Utils.Optional<FiscalMonthCountAggregateOutputType> | number
          }
        }
      }
      BankOperation: {
        payload: Prisma.$BankOperationPayload<ExtArgs>
        fields: Prisma.BankOperationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BankOperationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BankOperationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BankOperationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BankOperationPayload>
          }
          findFirst: {
            args: Prisma.BankOperationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BankOperationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BankOperationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BankOperationPayload>
          }
          findMany: {
            args: Prisma.BankOperationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BankOperationPayload>[]
          }
          create: {
            args: Prisma.BankOperationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BankOperationPayload>
          }
          createMany: {
            args: Prisma.BankOperationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BankOperationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BankOperationPayload>
          }
          update: {
            args: Prisma.BankOperationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BankOperationPayload>
          }
          deleteMany: {
            args: Prisma.BankOperationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BankOperationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BankOperationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BankOperationPayload>
          }
          aggregate: {
            args: Prisma.BankOperationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBankOperation>
          }
          groupBy: {
            args: Prisma.BankOperationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BankOperationGroupByOutputType>[]
          }
          count: {
            args: Prisma.BankOperationCountArgs<ExtArgs>,
            result: $Utils.Optional<BankOperationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AccountantCountOutputType
   */

  export type AccountantCountOutputType = {
    clients: number
  }

  export type AccountantCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    clients?: boolean | AccountantCountOutputTypeCountClientsArgs
  }

  // Custom InputTypes

  /**
   * AccountantCountOutputType without action
   */
  export type AccountantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountantCountOutputType
     */
    select?: AccountantCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AccountantCountOutputType without action
   */
  export type AccountantCountOutputTypeCountClientsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }



  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    fiscalMonths: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    fiscalMonths?: boolean | ClientCountOutputTypeCountFiscalMonthsArgs
  }

  // Custom InputTypes

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountFiscalMonthsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FiscalMonthWhereInput
  }



  /**
   * Count Type FiscalMonthCountOutputType
   */

  export type FiscalMonthCountOutputType = {
    operations: number
  }

  export type FiscalMonthCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    operations?: boolean | FiscalMonthCountOutputTypeCountOperationsArgs
  }

  // Custom InputTypes

  /**
   * FiscalMonthCountOutputType without action
   */
  export type FiscalMonthCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonthCountOutputType
     */
    select?: FiscalMonthCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FiscalMonthCountOutputType without action
   */
  export type FiscalMonthCountOutputTypeCountOperationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BankOperationWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Accountant
   */

  export type AggregateAccountant = {
    _count: AccountantCountAggregateOutputType | null
    _avg: AccountantAvgAggregateOutputType | null
    _sum: AccountantSumAggregateOutputType | null
    _min: AccountantMinAggregateOutputType | null
    _max: AccountantMaxAggregateOutputType | null
  }

  export type AccountantAvgAggregateOutputType = {
    id: number | null
  }

  export type AccountantSumAggregateOutputType = {
    id: number | null
  }

  export type AccountantMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type AccountantMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
  }

  export type AccountantCountAggregateOutputType = {
    id: number
    email: number
    password: number
    _all: number
  }


  export type AccountantAvgAggregateInputType = {
    id?: true
  }

  export type AccountantSumAggregateInputType = {
    id?: true
  }

  export type AccountantMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type AccountantMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
  }

  export type AccountantCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    _all?: true
  }

  export type AccountantAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accountant to aggregate.
     */
    where?: AccountantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accountants to fetch.
     */
    orderBy?: AccountantOrderByWithRelationInput | AccountantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accountants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accountants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accountants
    **/
    _count?: true | AccountantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountantMaxAggregateInputType
  }

  export type GetAccountantAggregateType<T extends AccountantAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountant[P]>
      : GetScalarType<T[P], AggregateAccountant[P]>
  }




  export type AccountantGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AccountantWhereInput
    orderBy?: AccountantOrderByWithAggregationInput | AccountantOrderByWithAggregationInput[]
    by: AccountantScalarFieldEnum[] | AccountantScalarFieldEnum
    having?: AccountantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountantCountAggregateInputType | true
    _avg?: AccountantAvgAggregateInputType
    _sum?: AccountantSumAggregateInputType
    _min?: AccountantMinAggregateInputType
    _max?: AccountantMaxAggregateInputType
  }

  export type AccountantGroupByOutputType = {
    id: number
    email: string
    password: string
    _count: AccountantCountAggregateOutputType | null
    _avg: AccountantAvgAggregateOutputType | null
    _sum: AccountantSumAggregateOutputType | null
    _min: AccountantMinAggregateOutputType | null
    _max: AccountantMaxAggregateOutputType | null
  }

  type GetAccountantGroupByPayload<T extends AccountantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountantGroupByOutputType[P]>
            : GetScalarType<T[P], AccountantGroupByOutputType[P]>
        }
      >
    >


  export type AccountantSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    clients?: boolean | Accountant$clientsArgs<ExtArgs>
    _count?: boolean | AccountantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountant"]>

  export type AccountantSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
  }

  export type AccountantInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    clients?: boolean | Accountant$clientsArgs<ExtArgs>
    _count?: boolean | AccountantCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AccountantPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Accountant"
    objects: {
      clients: Prisma.$ClientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      email: string
      password: string
    }, ExtArgs["result"]["accountant"]>
    composites: {}
  }


  type AccountantGetPayload<S extends boolean | null | undefined | AccountantDefaultArgs> = $Result.GetResult<Prisma.$AccountantPayload, S>

  type AccountantCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AccountantFindManyArgs, 'select' | 'include'> & {
      select?: AccountantCountAggregateInputType | true
    }

  export interface AccountantDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Accountant'], meta: { name: 'Accountant' } }
    /**
     * Find zero or one Accountant that matches the filter.
     * @param {AccountantFindUniqueArgs} args - Arguments to find a Accountant
     * @example
     * // Get one Accountant
     * const accountant = await prisma.accountant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountantFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountantFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountantClient<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Accountant that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountantFindUniqueOrThrowArgs} args - Arguments to find a Accountant
     * @example
     * // Get one Accountant
     * const accountant = await prisma.accountant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountantFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountantFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountantClient<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Accountant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountantFindFirstArgs} args - Arguments to find a Accountant
     * @example
     * // Get one Accountant
     * const accountant = await prisma.accountant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountantFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountantFindFirstArgs<ExtArgs>>
    ): Prisma__AccountantClient<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Accountant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountantFindFirstOrThrowArgs} args - Arguments to find a Accountant
     * @example
     * // Get one Accountant
     * const accountant = await prisma.accountant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountantFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountantFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountantClient<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accountants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accountants
     * const accountants = await prisma.accountant.findMany()
     * 
     * // Get first 10 Accountants
     * const accountants = await prisma.accountant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountantWithIdOnly = await prisma.accountant.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountantFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountantFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Accountant.
     * @param {AccountantCreateArgs} args - Arguments to create a Accountant.
     * @example
     * // Create one Accountant
     * const Accountant = await prisma.accountant.create({
     *   data: {
     *     // ... data to create a Accountant
     *   }
     * })
     * 
    **/
    create<T extends AccountantCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountantCreateArgs<ExtArgs>>
    ): Prisma__AccountantClient<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Accountants.
     *     @param {AccountantCreateManyArgs} args - Arguments to create many Accountants.
     *     @example
     *     // Create many Accountants
     *     const accountant = await prisma.accountant.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountantCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountantCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Accountant.
     * @param {AccountantDeleteArgs} args - Arguments to delete one Accountant.
     * @example
     * // Delete one Accountant
     * const Accountant = await prisma.accountant.delete({
     *   where: {
     *     // ... filter to delete one Accountant
     *   }
     * })
     * 
    **/
    delete<T extends AccountantDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountantDeleteArgs<ExtArgs>>
    ): Prisma__AccountantClient<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Accountant.
     * @param {AccountantUpdateArgs} args - Arguments to update one Accountant.
     * @example
     * // Update one Accountant
     * const accountant = await prisma.accountant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountantUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountantUpdateArgs<ExtArgs>>
    ): Prisma__AccountantClient<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accountants.
     * @param {AccountantDeleteManyArgs} args - Arguments to filter Accountants to delete.
     * @example
     * // Delete a few Accountants
     * const { count } = await prisma.accountant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountantDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountantDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accountants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accountants
     * const accountant = await prisma.accountant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountantUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountantUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Accountant.
     * @param {AccountantUpsertArgs} args - Arguments to update or create a Accountant.
     * @example
     * // Update or create a Accountant
     * const accountant = await prisma.accountant.upsert({
     *   create: {
     *     // ... data to create a Accountant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Accountant we want to update
     *   }
     * })
    **/
    upsert<T extends AccountantUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountantUpsertArgs<ExtArgs>>
    ): Prisma__AccountantClient<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accountants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountantCountArgs} args - Arguments to filter Accountants to count.
     * @example
     * // Count the number of Accountants
     * const count = await prisma.accountant.count({
     *   where: {
     *     // ... the filter for the Accountants we want to count
     *   }
     * })
    **/
    count<T extends AccountantCountArgs>(
      args?: Subset<T, AccountantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Accountant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountantAggregateArgs>(args: Subset<T, AccountantAggregateArgs>): Prisma.PrismaPromise<GetAccountantAggregateType<T>>

    /**
     * Group by Accountant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountantGroupByArgs['orderBy'] }
        : { orderBy?: AccountantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Accountant model
   */
  readonly fields: AccountantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Accountant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountantClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    clients<T extends Accountant$clientsArgs<ExtArgs> = {}>(args?: Subset<T, Accountant$clientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Accountant model
   */ 
  interface AccountantFieldRefs {
    readonly id: FieldRef<"Accountant", 'Int'>
    readonly email: FieldRef<"Accountant", 'String'>
    readonly password: FieldRef<"Accountant", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Accountant findUnique
   */
  export type AccountantFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
    /**
     * Filter, which Accountant to fetch.
     */
    where: AccountantWhereUniqueInput
  }


  /**
   * Accountant findUniqueOrThrow
   */
  export type AccountantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
    /**
     * Filter, which Accountant to fetch.
     */
    where: AccountantWhereUniqueInput
  }


  /**
   * Accountant findFirst
   */
  export type AccountantFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
    /**
     * Filter, which Accountant to fetch.
     */
    where?: AccountantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accountants to fetch.
     */
    orderBy?: AccountantOrderByWithRelationInput | AccountantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accountants.
     */
    cursor?: AccountantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accountants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accountants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accountants.
     */
    distinct?: AccountantScalarFieldEnum | AccountantScalarFieldEnum[]
  }


  /**
   * Accountant findFirstOrThrow
   */
  export type AccountantFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
    /**
     * Filter, which Accountant to fetch.
     */
    where?: AccountantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accountants to fetch.
     */
    orderBy?: AccountantOrderByWithRelationInput | AccountantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accountants.
     */
    cursor?: AccountantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accountants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accountants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accountants.
     */
    distinct?: AccountantScalarFieldEnum | AccountantScalarFieldEnum[]
  }


  /**
   * Accountant findMany
   */
  export type AccountantFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
    /**
     * Filter, which Accountants to fetch.
     */
    where?: AccountantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accountants to fetch.
     */
    orderBy?: AccountantOrderByWithRelationInput | AccountantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accountants.
     */
    cursor?: AccountantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accountants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accountants.
     */
    skip?: number
    distinct?: AccountantScalarFieldEnum | AccountantScalarFieldEnum[]
  }


  /**
   * Accountant create
   */
  export type AccountantCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
    /**
     * The data needed to create a Accountant.
     */
    data: XOR<AccountantCreateInput, AccountantUncheckedCreateInput>
  }


  /**
   * Accountant createMany
   */
  export type AccountantCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accountants.
     */
    data: AccountantCreateManyInput | AccountantCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Accountant update
   */
  export type AccountantUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
    /**
     * The data needed to update a Accountant.
     */
    data: XOR<AccountantUpdateInput, AccountantUncheckedUpdateInput>
    /**
     * Choose, which Accountant to update.
     */
    where: AccountantWhereUniqueInput
  }


  /**
   * Accountant updateMany
   */
  export type AccountantUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accountants.
     */
    data: XOR<AccountantUpdateManyMutationInput, AccountantUncheckedUpdateManyInput>
    /**
     * Filter which Accountants to update
     */
    where?: AccountantWhereInput
  }


  /**
   * Accountant upsert
   */
  export type AccountantUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
    /**
     * The filter to search for the Accountant to update in case it exists.
     */
    where: AccountantWhereUniqueInput
    /**
     * In case the Accountant found by the `where` argument doesn't exist, create a new Accountant with this data.
     */
    create: XOR<AccountantCreateInput, AccountantUncheckedCreateInput>
    /**
     * In case the Accountant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountantUpdateInput, AccountantUncheckedUpdateInput>
  }


  /**
   * Accountant delete
   */
  export type AccountantDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
    /**
     * Filter which Accountant to delete.
     */
    where: AccountantWhereUniqueInput
  }


  /**
   * Accountant deleteMany
   */
  export type AccountantDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accountants to delete
     */
    where?: AccountantWhereInput
  }


  /**
   * Accountant.clients
   */
  export type Accountant$clientsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Accountant without action
   */
  export type AccountantDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Accountant
     */
    select?: AccountantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountantInclude<ExtArgs> | null
  }



  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
    accountantId: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
    accountantId: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    pictureUrl: string | null
    name: string | null
    accountantId: number | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    pictureUrl: string | null
    name: string | null
    accountantId: number | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    pictureUrl: number
    name: number
    accountantId: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
    accountantId?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
    accountantId?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    pictureUrl?: true
    name?: true
    accountantId?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    pictureUrl?: true
    name?: true
    accountantId?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    pictureUrl?: true
    name?: true
    accountantId?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: number
    pictureUrl: string | null
    name: string
    accountantId: number
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pictureUrl?: boolean
    name?: boolean
    accountantId?: boolean
    accountant?: boolean | AccountantDefaultArgs<ExtArgs>
    fiscalMonths?: boolean | Client$fiscalMonthsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    pictureUrl?: boolean
    name?: boolean
    accountantId?: boolean
  }

  export type ClientInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    accountant?: boolean | AccountantDefaultArgs<ExtArgs>
    fiscalMonths?: boolean | Client$fiscalMonthsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ClientPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      accountant: Prisma.$AccountantPayload<ExtArgs>
      fiscalMonths: Prisma.$FiscalMonthPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      pictureUrl: string | null
      name: string
      accountantId: number
    }, ExtArgs["result"]["client"]>
    composites: {}
  }


  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClientFindManyArgs, 'select' | 'include'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Client that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
    **/
    create<T extends ClientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientCreateArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Clients.
     *     @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const client = await prisma.client.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
    **/
    delete<T extends ClientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
    **/
    upsert<T extends ClientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>
    ): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    accountant<T extends AccountantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AccountantDefaultArgs<ExtArgs>>): Prisma__AccountantClient<$Result.GetResult<Prisma.$AccountantPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    fiscalMonths<T extends Client$fiscalMonthsArgs<ExtArgs> = {}>(args?: Subset<T, Client$fiscalMonthsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Client model
   */ 
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'Int'>
    readonly pictureUrl: FieldRef<"Client", 'String'>
    readonly name: FieldRef<"Client", 'String'>
    readonly accountantId: FieldRef<"Client", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }


  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }


  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
  }


  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }


  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }


  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
  }


  /**
   * Client.fiscalMonths
   */
  export type Client$fiscalMonthsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    where?: FiscalMonthWhereInput
    orderBy?: FiscalMonthOrderByWithRelationInput | FiscalMonthOrderByWithRelationInput[]
    cursor?: FiscalMonthWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FiscalMonthScalarFieldEnum | FiscalMonthScalarFieldEnum[]
  }


  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientInclude<ExtArgs> | null
  }



  /**
   * Model FiscalMonth
   */

  export type AggregateFiscalMonth = {
    _count: FiscalMonthCountAggregateOutputType | null
    _avg: FiscalMonthAvgAggregateOutputType | null
    _sum: FiscalMonthSumAggregateOutputType | null
    _min: FiscalMonthMinAggregateOutputType | null
    _max: FiscalMonthMaxAggregateOutputType | null
  }

  export type FiscalMonthAvgAggregateOutputType = {
    id: number | null
    clientId: number | null
    controlBalance: number | null
  }

  export type FiscalMonthSumAggregateOutputType = {
    id: number | null
    clientId: number | null
    controlBalance: number | null
  }

  export type FiscalMonthMinAggregateOutputType = {
    id: number | null
    date: Date | null
    clientId: number | null
    controlBalance: number | null
    controlBankStatementUrl: string | null
  }

  export type FiscalMonthMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    clientId: number | null
    controlBalance: number | null
    controlBankStatementUrl: string | null
  }

  export type FiscalMonthCountAggregateOutputType = {
    id: number
    date: number
    clientId: number
    controlBalance: number
    controlBankStatementUrl: number
    _all: number
  }


  export type FiscalMonthAvgAggregateInputType = {
    id?: true
    clientId?: true
    controlBalance?: true
  }

  export type FiscalMonthSumAggregateInputType = {
    id?: true
    clientId?: true
    controlBalance?: true
  }

  export type FiscalMonthMinAggregateInputType = {
    id?: true
    date?: true
    clientId?: true
    controlBalance?: true
    controlBankStatementUrl?: true
  }

  export type FiscalMonthMaxAggregateInputType = {
    id?: true
    date?: true
    clientId?: true
    controlBalance?: true
    controlBankStatementUrl?: true
  }

  export type FiscalMonthCountAggregateInputType = {
    id?: true
    date?: true
    clientId?: true
    controlBalance?: true
    controlBankStatementUrl?: true
    _all?: true
  }

  export type FiscalMonthAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FiscalMonth to aggregate.
     */
    where?: FiscalMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiscalMonths to fetch.
     */
    orderBy?: FiscalMonthOrderByWithRelationInput | FiscalMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FiscalMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiscalMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiscalMonths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FiscalMonths
    **/
    _count?: true | FiscalMonthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FiscalMonthAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FiscalMonthSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FiscalMonthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FiscalMonthMaxAggregateInputType
  }

  export type GetFiscalMonthAggregateType<T extends FiscalMonthAggregateArgs> = {
        [P in keyof T & keyof AggregateFiscalMonth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiscalMonth[P]>
      : GetScalarType<T[P], AggregateFiscalMonth[P]>
  }




  export type FiscalMonthGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FiscalMonthWhereInput
    orderBy?: FiscalMonthOrderByWithAggregationInput | FiscalMonthOrderByWithAggregationInput[]
    by: FiscalMonthScalarFieldEnum[] | FiscalMonthScalarFieldEnum
    having?: FiscalMonthScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FiscalMonthCountAggregateInputType | true
    _avg?: FiscalMonthAvgAggregateInputType
    _sum?: FiscalMonthSumAggregateInputType
    _min?: FiscalMonthMinAggregateInputType
    _max?: FiscalMonthMaxAggregateInputType
  }

  export type FiscalMonthGroupByOutputType = {
    id: number
    date: Date
    clientId: number
    controlBalance: number | null
    controlBankStatementUrl: string | null
    _count: FiscalMonthCountAggregateOutputType | null
    _avg: FiscalMonthAvgAggregateOutputType | null
    _sum: FiscalMonthSumAggregateOutputType | null
    _min: FiscalMonthMinAggregateOutputType | null
    _max: FiscalMonthMaxAggregateOutputType | null
  }

  type GetFiscalMonthGroupByPayload<T extends FiscalMonthGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FiscalMonthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FiscalMonthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FiscalMonthGroupByOutputType[P]>
            : GetScalarType<T[P], FiscalMonthGroupByOutputType[P]>
        }
      >
    >


  export type FiscalMonthSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    clientId?: boolean
    controlBalance?: boolean
    controlBankStatementUrl?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    operations?: boolean | FiscalMonth$operationsArgs<ExtArgs>
    _count?: boolean | FiscalMonthCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fiscalMonth"]>

  export type FiscalMonthSelectScalar = {
    id?: boolean
    date?: boolean
    clientId?: boolean
    controlBalance?: boolean
    controlBankStatementUrl?: boolean
  }

  export type FiscalMonthInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    operations?: boolean | FiscalMonth$operationsArgs<ExtArgs>
    _count?: boolean | FiscalMonthCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FiscalMonthPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "FiscalMonth"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      operations: Prisma.$BankOperationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      date: Date
      clientId: number
      controlBalance: number | null
      controlBankStatementUrl: string | null
    }, ExtArgs["result"]["fiscalMonth"]>
    composites: {}
  }


  type FiscalMonthGetPayload<S extends boolean | null | undefined | FiscalMonthDefaultArgs> = $Result.GetResult<Prisma.$FiscalMonthPayload, S>

  type FiscalMonthCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FiscalMonthFindManyArgs, 'select' | 'include'> & {
      select?: FiscalMonthCountAggregateInputType | true
    }

  export interface FiscalMonthDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FiscalMonth'], meta: { name: 'FiscalMonth' } }
    /**
     * Find zero or one FiscalMonth that matches the filter.
     * @param {FiscalMonthFindUniqueArgs} args - Arguments to find a FiscalMonth
     * @example
     * // Get one FiscalMonth
     * const fiscalMonth = await prisma.fiscalMonth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FiscalMonthFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FiscalMonthFindUniqueArgs<ExtArgs>>
    ): Prisma__FiscalMonthClient<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FiscalMonth that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FiscalMonthFindUniqueOrThrowArgs} args - Arguments to find a FiscalMonth
     * @example
     * // Get one FiscalMonth
     * const fiscalMonth = await prisma.fiscalMonth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FiscalMonthFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FiscalMonthFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FiscalMonthClient<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FiscalMonth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalMonthFindFirstArgs} args - Arguments to find a FiscalMonth
     * @example
     * // Get one FiscalMonth
     * const fiscalMonth = await prisma.fiscalMonth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FiscalMonthFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FiscalMonthFindFirstArgs<ExtArgs>>
    ): Prisma__FiscalMonthClient<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FiscalMonth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalMonthFindFirstOrThrowArgs} args - Arguments to find a FiscalMonth
     * @example
     * // Get one FiscalMonth
     * const fiscalMonth = await prisma.fiscalMonth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FiscalMonthFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FiscalMonthFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FiscalMonthClient<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FiscalMonths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalMonthFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FiscalMonths
     * const fiscalMonths = await prisma.fiscalMonth.findMany()
     * 
     * // Get first 10 FiscalMonths
     * const fiscalMonths = await prisma.fiscalMonth.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fiscalMonthWithIdOnly = await prisma.fiscalMonth.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FiscalMonthFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FiscalMonthFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FiscalMonth.
     * @param {FiscalMonthCreateArgs} args - Arguments to create a FiscalMonth.
     * @example
     * // Create one FiscalMonth
     * const FiscalMonth = await prisma.fiscalMonth.create({
     *   data: {
     *     // ... data to create a FiscalMonth
     *   }
     * })
     * 
    **/
    create<T extends FiscalMonthCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FiscalMonthCreateArgs<ExtArgs>>
    ): Prisma__FiscalMonthClient<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FiscalMonths.
     *     @param {FiscalMonthCreateManyArgs} args - Arguments to create many FiscalMonths.
     *     @example
     *     // Create many FiscalMonths
     *     const fiscalMonth = await prisma.fiscalMonth.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FiscalMonthCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FiscalMonthCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FiscalMonth.
     * @param {FiscalMonthDeleteArgs} args - Arguments to delete one FiscalMonth.
     * @example
     * // Delete one FiscalMonth
     * const FiscalMonth = await prisma.fiscalMonth.delete({
     *   where: {
     *     // ... filter to delete one FiscalMonth
     *   }
     * })
     * 
    **/
    delete<T extends FiscalMonthDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FiscalMonthDeleteArgs<ExtArgs>>
    ): Prisma__FiscalMonthClient<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FiscalMonth.
     * @param {FiscalMonthUpdateArgs} args - Arguments to update one FiscalMonth.
     * @example
     * // Update one FiscalMonth
     * const fiscalMonth = await prisma.fiscalMonth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FiscalMonthUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FiscalMonthUpdateArgs<ExtArgs>>
    ): Prisma__FiscalMonthClient<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FiscalMonths.
     * @param {FiscalMonthDeleteManyArgs} args - Arguments to filter FiscalMonths to delete.
     * @example
     * // Delete a few FiscalMonths
     * const { count } = await prisma.fiscalMonth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FiscalMonthDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FiscalMonthDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FiscalMonths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalMonthUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FiscalMonths
     * const fiscalMonth = await prisma.fiscalMonth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FiscalMonthUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FiscalMonthUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FiscalMonth.
     * @param {FiscalMonthUpsertArgs} args - Arguments to update or create a FiscalMonth.
     * @example
     * // Update or create a FiscalMonth
     * const fiscalMonth = await prisma.fiscalMonth.upsert({
     *   create: {
     *     // ... data to create a FiscalMonth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FiscalMonth we want to update
     *   }
     * })
    **/
    upsert<T extends FiscalMonthUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FiscalMonthUpsertArgs<ExtArgs>>
    ): Prisma__FiscalMonthClient<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FiscalMonths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalMonthCountArgs} args - Arguments to filter FiscalMonths to count.
     * @example
     * // Count the number of FiscalMonths
     * const count = await prisma.fiscalMonth.count({
     *   where: {
     *     // ... the filter for the FiscalMonths we want to count
     *   }
     * })
    **/
    count<T extends FiscalMonthCountArgs>(
      args?: Subset<T, FiscalMonthCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FiscalMonthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FiscalMonth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalMonthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FiscalMonthAggregateArgs>(args: Subset<T, FiscalMonthAggregateArgs>): Prisma.PrismaPromise<GetFiscalMonthAggregateType<T>>

    /**
     * Group by FiscalMonth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiscalMonthGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FiscalMonthGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FiscalMonthGroupByArgs['orderBy'] }
        : { orderBy?: FiscalMonthGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FiscalMonthGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFiscalMonthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FiscalMonth model
   */
  readonly fields: FiscalMonthFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FiscalMonth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FiscalMonthClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    operations<T extends FiscalMonth$operationsArgs<ExtArgs> = {}>(args?: Subset<T, FiscalMonth$operationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FiscalMonth model
   */ 
  interface FiscalMonthFieldRefs {
    readonly id: FieldRef<"FiscalMonth", 'Int'>
    readonly date: FieldRef<"FiscalMonth", 'DateTime'>
    readonly clientId: FieldRef<"FiscalMonth", 'Int'>
    readonly controlBalance: FieldRef<"FiscalMonth", 'Int'>
    readonly controlBankStatementUrl: FieldRef<"FiscalMonth", 'String'>
  }
    

  // Custom InputTypes

  /**
   * FiscalMonth findUnique
   */
  export type FiscalMonthFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    /**
     * Filter, which FiscalMonth to fetch.
     */
    where: FiscalMonthWhereUniqueInput
  }


  /**
   * FiscalMonth findUniqueOrThrow
   */
  export type FiscalMonthFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    /**
     * Filter, which FiscalMonth to fetch.
     */
    where: FiscalMonthWhereUniqueInput
  }


  /**
   * FiscalMonth findFirst
   */
  export type FiscalMonthFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    /**
     * Filter, which FiscalMonth to fetch.
     */
    where?: FiscalMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiscalMonths to fetch.
     */
    orderBy?: FiscalMonthOrderByWithRelationInput | FiscalMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FiscalMonths.
     */
    cursor?: FiscalMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiscalMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiscalMonths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FiscalMonths.
     */
    distinct?: FiscalMonthScalarFieldEnum | FiscalMonthScalarFieldEnum[]
  }


  /**
   * FiscalMonth findFirstOrThrow
   */
  export type FiscalMonthFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    /**
     * Filter, which FiscalMonth to fetch.
     */
    where?: FiscalMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiscalMonths to fetch.
     */
    orderBy?: FiscalMonthOrderByWithRelationInput | FiscalMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FiscalMonths.
     */
    cursor?: FiscalMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiscalMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiscalMonths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FiscalMonths.
     */
    distinct?: FiscalMonthScalarFieldEnum | FiscalMonthScalarFieldEnum[]
  }


  /**
   * FiscalMonth findMany
   */
  export type FiscalMonthFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    /**
     * Filter, which FiscalMonths to fetch.
     */
    where?: FiscalMonthWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiscalMonths to fetch.
     */
    orderBy?: FiscalMonthOrderByWithRelationInput | FiscalMonthOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FiscalMonths.
     */
    cursor?: FiscalMonthWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiscalMonths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiscalMonths.
     */
    skip?: number
    distinct?: FiscalMonthScalarFieldEnum | FiscalMonthScalarFieldEnum[]
  }


  /**
   * FiscalMonth create
   */
  export type FiscalMonthCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    /**
     * The data needed to create a FiscalMonth.
     */
    data: XOR<FiscalMonthCreateInput, FiscalMonthUncheckedCreateInput>
  }


  /**
   * FiscalMonth createMany
   */
  export type FiscalMonthCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FiscalMonths.
     */
    data: FiscalMonthCreateManyInput | FiscalMonthCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FiscalMonth update
   */
  export type FiscalMonthUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    /**
     * The data needed to update a FiscalMonth.
     */
    data: XOR<FiscalMonthUpdateInput, FiscalMonthUncheckedUpdateInput>
    /**
     * Choose, which FiscalMonth to update.
     */
    where: FiscalMonthWhereUniqueInput
  }


  /**
   * FiscalMonth updateMany
   */
  export type FiscalMonthUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FiscalMonths.
     */
    data: XOR<FiscalMonthUpdateManyMutationInput, FiscalMonthUncheckedUpdateManyInput>
    /**
     * Filter which FiscalMonths to update
     */
    where?: FiscalMonthWhereInput
  }


  /**
   * FiscalMonth upsert
   */
  export type FiscalMonthUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    /**
     * The filter to search for the FiscalMonth to update in case it exists.
     */
    where: FiscalMonthWhereUniqueInput
    /**
     * In case the FiscalMonth found by the `where` argument doesn't exist, create a new FiscalMonth with this data.
     */
    create: XOR<FiscalMonthCreateInput, FiscalMonthUncheckedCreateInput>
    /**
     * In case the FiscalMonth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FiscalMonthUpdateInput, FiscalMonthUncheckedUpdateInput>
  }


  /**
   * FiscalMonth delete
   */
  export type FiscalMonthDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
    /**
     * Filter which FiscalMonth to delete.
     */
    where: FiscalMonthWhereUniqueInput
  }


  /**
   * FiscalMonth deleteMany
   */
  export type FiscalMonthDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FiscalMonths to delete
     */
    where?: FiscalMonthWhereInput
  }


  /**
   * FiscalMonth.operations
   */
  export type FiscalMonth$operationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    where?: BankOperationWhereInput
    orderBy?: BankOperationOrderByWithRelationInput | BankOperationOrderByWithRelationInput[]
    cursor?: BankOperationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BankOperationScalarFieldEnum | BankOperationScalarFieldEnum[]
  }


  /**
   * FiscalMonth without action
   */
  export type FiscalMonthDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiscalMonth
     */
    select?: FiscalMonthSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FiscalMonthInclude<ExtArgs> | null
  }



  /**
   * Model BankOperation
   */

  export type AggregateBankOperation = {
    _count: BankOperationCountAggregateOutputType | null
    _avg: BankOperationAvgAggregateOutputType | null
    _sum: BankOperationSumAggregateOutputType | null
    _min: BankOperationMinAggregateOutputType | null
    _max: BankOperationMaxAggregateOutputType | null
  }

  export type BankOperationAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    fiscalMonthId: number | null
  }

  export type BankOperationSumAggregateOutputType = {
    id: number | null
    amount: number | null
    fiscalMonthId: number | null
  }

  export type BankOperationMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    wording: string | null
    amount: number | null
    fiscalMonthId: number | null
  }

  export type BankOperationMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    wording: string | null
    amount: number | null
    fiscalMonthId: number | null
  }

  export type BankOperationCountAggregateOutputType = {
    id: number
    createdAt: number
    wording: number
    amount: number
    fiscalMonthId: number
    _all: number
  }


  export type BankOperationAvgAggregateInputType = {
    id?: true
    amount?: true
    fiscalMonthId?: true
  }

  export type BankOperationSumAggregateInputType = {
    id?: true
    amount?: true
    fiscalMonthId?: true
  }

  export type BankOperationMinAggregateInputType = {
    id?: true
    createdAt?: true
    wording?: true
    amount?: true
    fiscalMonthId?: true
  }

  export type BankOperationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    wording?: true
    amount?: true
    fiscalMonthId?: true
  }

  export type BankOperationCountAggregateInputType = {
    id?: true
    createdAt?: true
    wording?: true
    amount?: true
    fiscalMonthId?: true
    _all?: true
  }

  export type BankOperationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankOperation to aggregate.
     */
    where?: BankOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankOperations to fetch.
     */
    orderBy?: BankOperationOrderByWithRelationInput | BankOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BankOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankOperations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BankOperations
    **/
    _count?: true | BankOperationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BankOperationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BankOperationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BankOperationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BankOperationMaxAggregateInputType
  }

  export type GetBankOperationAggregateType<T extends BankOperationAggregateArgs> = {
        [P in keyof T & keyof AggregateBankOperation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBankOperation[P]>
      : GetScalarType<T[P], AggregateBankOperation[P]>
  }




  export type BankOperationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BankOperationWhereInput
    orderBy?: BankOperationOrderByWithAggregationInput | BankOperationOrderByWithAggregationInput[]
    by: BankOperationScalarFieldEnum[] | BankOperationScalarFieldEnum
    having?: BankOperationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BankOperationCountAggregateInputType | true
    _avg?: BankOperationAvgAggregateInputType
    _sum?: BankOperationSumAggregateInputType
    _min?: BankOperationMinAggregateInputType
    _max?: BankOperationMaxAggregateInputType
  }

  export type BankOperationGroupByOutputType = {
    id: number
    createdAt: Date
    wording: string
    amount: number
    fiscalMonthId: number
    _count: BankOperationCountAggregateOutputType | null
    _avg: BankOperationAvgAggregateOutputType | null
    _sum: BankOperationSumAggregateOutputType | null
    _min: BankOperationMinAggregateOutputType | null
    _max: BankOperationMaxAggregateOutputType | null
  }

  type GetBankOperationGroupByPayload<T extends BankOperationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BankOperationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BankOperationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BankOperationGroupByOutputType[P]>
            : GetScalarType<T[P], BankOperationGroupByOutputType[P]>
        }
      >
    >


  export type BankOperationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    wording?: boolean
    amount?: boolean
    fiscalMonthId?: boolean
    fiscalMonth?: boolean | FiscalMonthDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankOperation"]>

  export type BankOperationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    wording?: boolean
    amount?: boolean
    fiscalMonthId?: boolean
  }

  export type BankOperationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    fiscalMonth?: boolean | FiscalMonthDefaultArgs<ExtArgs>
  }


  export type $BankOperationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "BankOperation"
    objects: {
      fiscalMonth: Prisma.$FiscalMonthPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      createdAt: Date
      wording: string
      amount: number
      fiscalMonthId: number
    }, ExtArgs["result"]["bankOperation"]>
    composites: {}
  }


  type BankOperationGetPayload<S extends boolean | null | undefined | BankOperationDefaultArgs> = $Result.GetResult<Prisma.$BankOperationPayload, S>

  type BankOperationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BankOperationFindManyArgs, 'select' | 'include'> & {
      select?: BankOperationCountAggregateInputType | true
    }

  export interface BankOperationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankOperation'], meta: { name: 'BankOperation' } }
    /**
     * Find zero or one BankOperation that matches the filter.
     * @param {BankOperationFindUniqueArgs} args - Arguments to find a BankOperation
     * @example
     * // Get one BankOperation
     * const bankOperation = await prisma.bankOperation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BankOperationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BankOperationFindUniqueArgs<ExtArgs>>
    ): Prisma__BankOperationClient<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BankOperation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BankOperationFindUniqueOrThrowArgs} args - Arguments to find a BankOperation
     * @example
     * // Get one BankOperation
     * const bankOperation = await prisma.bankOperation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BankOperationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BankOperationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BankOperationClient<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BankOperation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankOperationFindFirstArgs} args - Arguments to find a BankOperation
     * @example
     * // Get one BankOperation
     * const bankOperation = await prisma.bankOperation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BankOperationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BankOperationFindFirstArgs<ExtArgs>>
    ): Prisma__BankOperationClient<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BankOperation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankOperationFindFirstOrThrowArgs} args - Arguments to find a BankOperation
     * @example
     * // Get one BankOperation
     * const bankOperation = await prisma.bankOperation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BankOperationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BankOperationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BankOperationClient<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BankOperations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankOperationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BankOperations
     * const bankOperations = await prisma.bankOperation.findMany()
     * 
     * // Get first 10 BankOperations
     * const bankOperations = await prisma.bankOperation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bankOperationWithIdOnly = await prisma.bankOperation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BankOperationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BankOperationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BankOperation.
     * @param {BankOperationCreateArgs} args - Arguments to create a BankOperation.
     * @example
     * // Create one BankOperation
     * const BankOperation = await prisma.bankOperation.create({
     *   data: {
     *     // ... data to create a BankOperation
     *   }
     * })
     * 
    **/
    create<T extends BankOperationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BankOperationCreateArgs<ExtArgs>>
    ): Prisma__BankOperationClient<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BankOperations.
     *     @param {BankOperationCreateManyArgs} args - Arguments to create many BankOperations.
     *     @example
     *     // Create many BankOperations
     *     const bankOperation = await prisma.bankOperation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BankOperationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BankOperationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BankOperation.
     * @param {BankOperationDeleteArgs} args - Arguments to delete one BankOperation.
     * @example
     * // Delete one BankOperation
     * const BankOperation = await prisma.bankOperation.delete({
     *   where: {
     *     // ... filter to delete one BankOperation
     *   }
     * })
     * 
    **/
    delete<T extends BankOperationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BankOperationDeleteArgs<ExtArgs>>
    ): Prisma__BankOperationClient<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BankOperation.
     * @param {BankOperationUpdateArgs} args - Arguments to update one BankOperation.
     * @example
     * // Update one BankOperation
     * const bankOperation = await prisma.bankOperation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BankOperationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BankOperationUpdateArgs<ExtArgs>>
    ): Prisma__BankOperationClient<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BankOperations.
     * @param {BankOperationDeleteManyArgs} args - Arguments to filter BankOperations to delete.
     * @example
     * // Delete a few BankOperations
     * const { count } = await prisma.bankOperation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BankOperationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BankOperationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankOperations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankOperationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BankOperations
     * const bankOperation = await prisma.bankOperation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BankOperationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BankOperationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BankOperation.
     * @param {BankOperationUpsertArgs} args - Arguments to update or create a BankOperation.
     * @example
     * // Update or create a BankOperation
     * const bankOperation = await prisma.bankOperation.upsert({
     *   create: {
     *     // ... data to create a BankOperation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BankOperation we want to update
     *   }
     * })
    **/
    upsert<T extends BankOperationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BankOperationUpsertArgs<ExtArgs>>
    ): Prisma__BankOperationClient<$Result.GetResult<Prisma.$BankOperationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BankOperations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankOperationCountArgs} args - Arguments to filter BankOperations to count.
     * @example
     * // Count the number of BankOperations
     * const count = await prisma.bankOperation.count({
     *   where: {
     *     // ... the filter for the BankOperations we want to count
     *   }
     * })
    **/
    count<T extends BankOperationCountArgs>(
      args?: Subset<T, BankOperationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BankOperationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BankOperation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankOperationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BankOperationAggregateArgs>(args: Subset<T, BankOperationAggregateArgs>): Prisma.PrismaPromise<GetBankOperationAggregateType<T>>

    /**
     * Group by BankOperation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankOperationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BankOperationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BankOperationGroupByArgs['orderBy'] }
        : { orderBy?: BankOperationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BankOperationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankOperationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BankOperation model
   */
  readonly fields: BankOperationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BankOperation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BankOperationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    fiscalMonth<T extends FiscalMonthDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FiscalMonthDefaultArgs<ExtArgs>>): Prisma__FiscalMonthClient<$Result.GetResult<Prisma.$FiscalMonthPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BankOperation model
   */ 
  interface BankOperationFieldRefs {
    readonly id: FieldRef<"BankOperation", 'Int'>
    readonly createdAt: FieldRef<"BankOperation", 'DateTime'>
    readonly wording: FieldRef<"BankOperation", 'String'>
    readonly amount: FieldRef<"BankOperation", 'Int'>
    readonly fiscalMonthId: FieldRef<"BankOperation", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * BankOperation findUnique
   */
  export type BankOperationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    /**
     * Filter, which BankOperation to fetch.
     */
    where: BankOperationWhereUniqueInput
  }


  /**
   * BankOperation findUniqueOrThrow
   */
  export type BankOperationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    /**
     * Filter, which BankOperation to fetch.
     */
    where: BankOperationWhereUniqueInput
  }


  /**
   * BankOperation findFirst
   */
  export type BankOperationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    /**
     * Filter, which BankOperation to fetch.
     */
    where?: BankOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankOperations to fetch.
     */
    orderBy?: BankOperationOrderByWithRelationInput | BankOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankOperations.
     */
    cursor?: BankOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankOperations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankOperations.
     */
    distinct?: BankOperationScalarFieldEnum | BankOperationScalarFieldEnum[]
  }


  /**
   * BankOperation findFirstOrThrow
   */
  export type BankOperationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    /**
     * Filter, which BankOperation to fetch.
     */
    where?: BankOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankOperations to fetch.
     */
    orderBy?: BankOperationOrderByWithRelationInput | BankOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankOperations.
     */
    cursor?: BankOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankOperations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankOperations.
     */
    distinct?: BankOperationScalarFieldEnum | BankOperationScalarFieldEnum[]
  }


  /**
   * BankOperation findMany
   */
  export type BankOperationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    /**
     * Filter, which BankOperations to fetch.
     */
    where?: BankOperationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankOperations to fetch.
     */
    orderBy?: BankOperationOrderByWithRelationInput | BankOperationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BankOperations.
     */
    cursor?: BankOperationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankOperations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankOperations.
     */
    skip?: number
    distinct?: BankOperationScalarFieldEnum | BankOperationScalarFieldEnum[]
  }


  /**
   * BankOperation create
   */
  export type BankOperationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    /**
     * The data needed to create a BankOperation.
     */
    data: XOR<BankOperationCreateInput, BankOperationUncheckedCreateInput>
  }


  /**
   * BankOperation createMany
   */
  export type BankOperationCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BankOperations.
     */
    data: BankOperationCreateManyInput | BankOperationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BankOperation update
   */
  export type BankOperationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    /**
     * The data needed to update a BankOperation.
     */
    data: XOR<BankOperationUpdateInput, BankOperationUncheckedUpdateInput>
    /**
     * Choose, which BankOperation to update.
     */
    where: BankOperationWhereUniqueInput
  }


  /**
   * BankOperation updateMany
   */
  export type BankOperationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BankOperations.
     */
    data: XOR<BankOperationUpdateManyMutationInput, BankOperationUncheckedUpdateManyInput>
    /**
     * Filter which BankOperations to update
     */
    where?: BankOperationWhereInput
  }


  /**
   * BankOperation upsert
   */
  export type BankOperationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    /**
     * The filter to search for the BankOperation to update in case it exists.
     */
    where: BankOperationWhereUniqueInput
    /**
     * In case the BankOperation found by the `where` argument doesn't exist, create a new BankOperation with this data.
     */
    create: XOR<BankOperationCreateInput, BankOperationUncheckedCreateInput>
    /**
     * In case the BankOperation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BankOperationUpdateInput, BankOperationUncheckedUpdateInput>
  }


  /**
   * BankOperation delete
   */
  export type BankOperationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
    /**
     * Filter which BankOperation to delete.
     */
    where: BankOperationWhereUniqueInput
  }


  /**
   * BankOperation deleteMany
   */
  export type BankOperationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankOperations to delete
     */
    where?: BankOperationWhereInput
  }


  /**
   * BankOperation without action
   */
  export type BankOperationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankOperation
     */
    select?: BankOperationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BankOperationInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountantScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password'
  };

  export type AccountantScalarFieldEnum = (typeof AccountantScalarFieldEnum)[keyof typeof AccountantScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    pictureUrl: 'pictureUrl',
    name: 'name',
    accountantId: 'accountantId'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const FiscalMonthScalarFieldEnum: {
    id: 'id',
    date: 'date',
    clientId: 'clientId',
    controlBalance: 'controlBalance',
    controlBankStatementUrl: 'controlBankStatementUrl'
  };

  export type FiscalMonthScalarFieldEnum = (typeof FiscalMonthScalarFieldEnum)[keyof typeof FiscalMonthScalarFieldEnum]


  export const BankOperationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    wording: 'wording',
    amount: 'amount',
    fiscalMonthId: 'fiscalMonthId'
  };

  export type BankOperationScalarFieldEnum = (typeof BankOperationScalarFieldEnum)[keyof typeof BankOperationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountantWhereInput = {
    AND?: AccountantWhereInput | AccountantWhereInput[]
    OR?: AccountantWhereInput[]
    NOT?: AccountantWhereInput | AccountantWhereInput[]
    id?: IntFilter<"Accountant"> | number
    email?: StringFilter<"Accountant"> | string
    password?: StringFilter<"Accountant"> | string
    clients?: ClientListRelationFilter
  }

  export type AccountantOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    clients?: ClientOrderByRelationAggregateInput
  }

  export type AccountantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: AccountantWhereInput | AccountantWhereInput[]
    OR?: AccountantWhereInput[]
    NOT?: AccountantWhereInput | AccountantWhereInput[]
    password?: StringFilter<"Accountant"> | string
    clients?: ClientListRelationFilter
  }, "id" | "email">

  export type AccountantOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: AccountantCountOrderByAggregateInput
    _avg?: AccountantAvgOrderByAggregateInput
    _max?: AccountantMaxOrderByAggregateInput
    _min?: AccountantMinOrderByAggregateInput
    _sum?: AccountantSumOrderByAggregateInput
  }

  export type AccountantScalarWhereWithAggregatesInput = {
    AND?: AccountantScalarWhereWithAggregatesInput | AccountantScalarWhereWithAggregatesInput[]
    OR?: AccountantScalarWhereWithAggregatesInput[]
    NOT?: AccountantScalarWhereWithAggregatesInput | AccountantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Accountant"> | number
    email?: StringWithAggregatesFilter<"Accountant"> | string
    password?: StringWithAggregatesFilter<"Accountant"> | string
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: IntFilter<"Client"> | number
    pictureUrl?: StringNullableFilter<"Client"> | string | null
    name?: StringFilter<"Client"> | string
    accountantId?: IntFilter<"Client"> | number
    accountant?: XOR<AccountantRelationFilter, AccountantWhereInput>
    fiscalMonths?: FiscalMonthListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    pictureUrl?: SortOrderInput | SortOrder
    name?: SortOrder
    accountantId?: SortOrder
    accountant?: AccountantOrderByWithRelationInput
    fiscalMonths?: FiscalMonthOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    pictureUrl?: StringNullableFilter<"Client"> | string | null
    accountantId?: IntFilter<"Client"> | number
    accountant?: XOR<AccountantRelationFilter, AccountantWhereInput>
    fiscalMonths?: FiscalMonthListRelationFilter
  }, "id" | "name">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    pictureUrl?: SortOrderInput | SortOrder
    name?: SortOrder
    accountantId?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Client"> | number
    pictureUrl?: StringNullableWithAggregatesFilter<"Client"> | string | null
    name?: StringWithAggregatesFilter<"Client"> | string
    accountantId?: IntWithAggregatesFilter<"Client"> | number
  }

  export type FiscalMonthWhereInput = {
    AND?: FiscalMonthWhereInput | FiscalMonthWhereInput[]
    OR?: FiscalMonthWhereInput[]
    NOT?: FiscalMonthWhereInput | FiscalMonthWhereInput[]
    id?: IntFilter<"FiscalMonth"> | number
    date?: DateTimeFilter<"FiscalMonth"> | Date | string
    clientId?: IntFilter<"FiscalMonth"> | number
    controlBalance?: IntNullableFilter<"FiscalMonth"> | number | null
    controlBankStatementUrl?: StringNullableFilter<"FiscalMonth"> | string | null
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    operations?: BankOperationListRelationFilter
  }

  export type FiscalMonthOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    clientId?: SortOrder
    controlBalance?: SortOrderInput | SortOrder
    controlBankStatementUrl?: SortOrderInput | SortOrder
    client?: ClientOrderByWithRelationInput
    operations?: BankOperationOrderByRelationAggregateInput
  }

  export type FiscalMonthWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FiscalMonthWhereInput | FiscalMonthWhereInput[]
    OR?: FiscalMonthWhereInput[]
    NOT?: FiscalMonthWhereInput | FiscalMonthWhereInput[]
    date?: DateTimeFilter<"FiscalMonth"> | Date | string
    clientId?: IntFilter<"FiscalMonth"> | number
    controlBalance?: IntNullableFilter<"FiscalMonth"> | number | null
    controlBankStatementUrl?: StringNullableFilter<"FiscalMonth"> | string | null
    client?: XOR<ClientRelationFilter, ClientWhereInput>
    operations?: BankOperationListRelationFilter
  }, "id">

  export type FiscalMonthOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    clientId?: SortOrder
    controlBalance?: SortOrderInput | SortOrder
    controlBankStatementUrl?: SortOrderInput | SortOrder
    _count?: FiscalMonthCountOrderByAggregateInput
    _avg?: FiscalMonthAvgOrderByAggregateInput
    _max?: FiscalMonthMaxOrderByAggregateInput
    _min?: FiscalMonthMinOrderByAggregateInput
    _sum?: FiscalMonthSumOrderByAggregateInput
  }

  export type FiscalMonthScalarWhereWithAggregatesInput = {
    AND?: FiscalMonthScalarWhereWithAggregatesInput | FiscalMonthScalarWhereWithAggregatesInput[]
    OR?: FiscalMonthScalarWhereWithAggregatesInput[]
    NOT?: FiscalMonthScalarWhereWithAggregatesInput | FiscalMonthScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FiscalMonth"> | number
    date?: DateTimeWithAggregatesFilter<"FiscalMonth"> | Date | string
    clientId?: IntWithAggregatesFilter<"FiscalMonth"> | number
    controlBalance?: IntNullableWithAggregatesFilter<"FiscalMonth"> | number | null
    controlBankStatementUrl?: StringNullableWithAggregatesFilter<"FiscalMonth"> | string | null
  }

  export type BankOperationWhereInput = {
    AND?: BankOperationWhereInput | BankOperationWhereInput[]
    OR?: BankOperationWhereInput[]
    NOT?: BankOperationWhereInput | BankOperationWhereInput[]
    id?: IntFilter<"BankOperation"> | number
    createdAt?: DateTimeFilter<"BankOperation"> | Date | string
    wording?: StringFilter<"BankOperation"> | string
    amount?: IntFilter<"BankOperation"> | number
    fiscalMonthId?: IntFilter<"BankOperation"> | number
    fiscalMonth?: XOR<FiscalMonthRelationFilter, FiscalMonthWhereInput>
  }

  export type BankOperationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    wording?: SortOrder
    amount?: SortOrder
    fiscalMonthId?: SortOrder
    fiscalMonth?: FiscalMonthOrderByWithRelationInput
  }

  export type BankOperationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BankOperationWhereInput | BankOperationWhereInput[]
    OR?: BankOperationWhereInput[]
    NOT?: BankOperationWhereInput | BankOperationWhereInput[]
    createdAt?: DateTimeFilter<"BankOperation"> | Date | string
    wording?: StringFilter<"BankOperation"> | string
    amount?: IntFilter<"BankOperation"> | number
    fiscalMonthId?: IntFilter<"BankOperation"> | number
    fiscalMonth?: XOR<FiscalMonthRelationFilter, FiscalMonthWhereInput>
  }, "id">

  export type BankOperationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    wording?: SortOrder
    amount?: SortOrder
    fiscalMonthId?: SortOrder
    _count?: BankOperationCountOrderByAggregateInput
    _avg?: BankOperationAvgOrderByAggregateInput
    _max?: BankOperationMaxOrderByAggregateInput
    _min?: BankOperationMinOrderByAggregateInput
    _sum?: BankOperationSumOrderByAggregateInput
  }

  export type BankOperationScalarWhereWithAggregatesInput = {
    AND?: BankOperationScalarWhereWithAggregatesInput | BankOperationScalarWhereWithAggregatesInput[]
    OR?: BankOperationScalarWhereWithAggregatesInput[]
    NOT?: BankOperationScalarWhereWithAggregatesInput | BankOperationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BankOperation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"BankOperation"> | Date | string
    wording?: StringWithAggregatesFilter<"BankOperation"> | string
    amount?: IntWithAggregatesFilter<"BankOperation"> | number
    fiscalMonthId?: IntWithAggregatesFilter<"BankOperation"> | number
  }

  export type AccountantCreateInput = {
    email: string
    password: string
    clients?: ClientCreateNestedManyWithoutAccountantInput
  }

  export type AccountantUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    clients?: ClientUncheckedCreateNestedManyWithoutAccountantInput
  }

  export type AccountantUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clients?: ClientUpdateManyWithoutAccountantNestedInput
  }

  export type AccountantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    clients?: ClientUncheckedUpdateManyWithoutAccountantNestedInput
  }

  export type AccountantCreateManyInput = {
    id?: number
    email: string
    password: string
  }

  export type AccountantUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AccountantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type ClientCreateInput = {
    pictureUrl?: string | null
    name: string
    accountant: AccountantCreateNestedOneWithoutClientsInput
    fiscalMonths?: FiscalMonthCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: number
    pictureUrl?: string | null
    name: string
    accountantId: number
    fiscalMonths?: FiscalMonthUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    accountant?: AccountantUpdateOneRequiredWithoutClientsNestedInput
    fiscalMonths?: FiscalMonthUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    accountantId?: IntFieldUpdateOperationsInput | number
    fiscalMonths?: FiscalMonthUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: number
    pictureUrl?: string | null
    name: string
    accountantId: number
  }

  export type ClientUpdateManyMutationInput = {
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    accountantId?: IntFieldUpdateOperationsInput | number
  }

  export type FiscalMonthCreateInput = {
    date: Date | string
    controlBalance?: number | null
    controlBankStatementUrl?: string | null
    client: ClientCreateNestedOneWithoutFiscalMonthsInput
    operations?: BankOperationCreateNestedManyWithoutFiscalMonthInput
  }

  export type FiscalMonthUncheckedCreateInput = {
    id?: number
    date: Date | string
    clientId: number
    controlBalance?: number | null
    controlBankStatementUrl?: string | null
    operations?: BankOperationUncheckedCreateNestedManyWithoutFiscalMonthInput
  }

  export type FiscalMonthUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    controlBalance?: NullableIntFieldUpdateOperationsInput | number | null
    controlBankStatementUrl?: NullableStringFieldUpdateOperationsInput | string | null
    client?: ClientUpdateOneRequiredWithoutFiscalMonthsNestedInput
    operations?: BankOperationUpdateManyWithoutFiscalMonthNestedInput
  }

  export type FiscalMonthUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: IntFieldUpdateOperationsInput | number
    controlBalance?: NullableIntFieldUpdateOperationsInput | number | null
    controlBankStatementUrl?: NullableStringFieldUpdateOperationsInput | string | null
    operations?: BankOperationUncheckedUpdateManyWithoutFiscalMonthNestedInput
  }

  export type FiscalMonthCreateManyInput = {
    id?: number
    date: Date | string
    clientId: number
    controlBalance?: number | null
    controlBankStatementUrl?: string | null
  }

  export type FiscalMonthUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    controlBalance?: NullableIntFieldUpdateOperationsInput | number | null
    controlBankStatementUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FiscalMonthUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: IntFieldUpdateOperationsInput | number
    controlBalance?: NullableIntFieldUpdateOperationsInput | number | null
    controlBankStatementUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BankOperationCreateInput = {
    createdAt: Date | string
    wording: string
    amount: number
    fiscalMonth: FiscalMonthCreateNestedOneWithoutOperationsInput
  }

  export type BankOperationUncheckedCreateInput = {
    id?: number
    createdAt: Date | string
    wording: string
    amount: number
    fiscalMonthId: number
  }

  export type BankOperationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wording?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fiscalMonth?: FiscalMonthUpdateOneRequiredWithoutOperationsNestedInput
  }

  export type BankOperationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wording?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fiscalMonthId?: IntFieldUpdateOperationsInput | number
  }

  export type BankOperationCreateManyInput = {
    id?: number
    createdAt: Date | string
    wording: string
    amount: number
    fiscalMonthId: number
  }

  export type BankOperationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wording?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type BankOperationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wording?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fiscalMonthId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ClientListRelationFilter = {
    every?: ClientWhereInput
    some?: ClientWhereInput
    none?: ClientWhereInput
  }

  export type ClientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountantCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type AccountantAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccountantMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type AccountantMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type AccountantSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AccountantRelationFilter = {
    is?: AccountantWhereInput
    isNot?: AccountantWhereInput
  }

  export type FiscalMonthListRelationFilter = {
    every?: FiscalMonthWhereInput
    some?: FiscalMonthWhereInput
    none?: FiscalMonthWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FiscalMonthOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    pictureUrl?: SortOrder
    name?: SortOrder
    accountantId?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    id?: SortOrder
    accountantId?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    pictureUrl?: SortOrder
    name?: SortOrder
    accountantId?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    pictureUrl?: SortOrder
    name?: SortOrder
    accountantId?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    id?: SortOrder
    accountantId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ClientRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type BankOperationListRelationFilter = {
    every?: BankOperationWhereInput
    some?: BankOperationWhereInput
    none?: BankOperationWhereInput
  }

  export type BankOperationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FiscalMonthCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    clientId?: SortOrder
    controlBalance?: SortOrder
    controlBankStatementUrl?: SortOrder
  }

  export type FiscalMonthAvgOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    controlBalance?: SortOrder
  }

  export type FiscalMonthMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    clientId?: SortOrder
    controlBalance?: SortOrder
    controlBankStatementUrl?: SortOrder
  }

  export type FiscalMonthMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    clientId?: SortOrder
    controlBalance?: SortOrder
    controlBankStatementUrl?: SortOrder
  }

  export type FiscalMonthSumOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    controlBalance?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FiscalMonthRelationFilter = {
    is?: FiscalMonthWhereInput
    isNot?: FiscalMonthWhereInput
  }

  export type BankOperationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    wording?: SortOrder
    amount?: SortOrder
    fiscalMonthId?: SortOrder
  }

  export type BankOperationAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    fiscalMonthId?: SortOrder
  }

  export type BankOperationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    wording?: SortOrder
    amount?: SortOrder
    fiscalMonthId?: SortOrder
  }

  export type BankOperationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    wording?: SortOrder
    amount?: SortOrder
    fiscalMonthId?: SortOrder
  }

  export type BankOperationSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    fiscalMonthId?: SortOrder
  }

  export type ClientCreateNestedManyWithoutAccountantInput = {
    create?: XOR<ClientCreateWithoutAccountantInput, ClientUncheckedCreateWithoutAccountantInput> | ClientCreateWithoutAccountantInput[] | ClientUncheckedCreateWithoutAccountantInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAccountantInput | ClientCreateOrConnectWithoutAccountantInput[]
    createMany?: ClientCreateManyAccountantInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutAccountantInput = {
    create?: XOR<ClientCreateWithoutAccountantInput, ClientUncheckedCreateWithoutAccountantInput> | ClientCreateWithoutAccountantInput[] | ClientUncheckedCreateWithoutAccountantInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAccountantInput | ClientCreateOrConnectWithoutAccountantInput[]
    createMany?: ClientCreateManyAccountantInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ClientUpdateManyWithoutAccountantNestedInput = {
    create?: XOR<ClientCreateWithoutAccountantInput, ClientUncheckedCreateWithoutAccountantInput> | ClientCreateWithoutAccountantInput[] | ClientUncheckedCreateWithoutAccountantInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAccountantInput | ClientCreateOrConnectWithoutAccountantInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAccountantInput | ClientUpsertWithWhereUniqueWithoutAccountantInput[]
    createMany?: ClientCreateManyAccountantInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAccountantInput | ClientUpdateWithWhereUniqueWithoutAccountantInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAccountantInput | ClientUpdateManyWithWhereWithoutAccountantInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClientUncheckedUpdateManyWithoutAccountantNestedInput = {
    create?: XOR<ClientCreateWithoutAccountantInput, ClientUncheckedCreateWithoutAccountantInput> | ClientCreateWithoutAccountantInput[] | ClientUncheckedCreateWithoutAccountantInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutAccountantInput | ClientCreateOrConnectWithoutAccountantInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutAccountantInput | ClientUpsertWithWhereUniqueWithoutAccountantInput[]
    createMany?: ClientCreateManyAccountantInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutAccountantInput | ClientUpdateWithWhereUniqueWithoutAccountantInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutAccountantInput | ClientUpdateManyWithWhereWithoutAccountantInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type AccountantCreateNestedOneWithoutClientsInput = {
    create?: XOR<AccountantCreateWithoutClientsInput, AccountantUncheckedCreateWithoutClientsInput>
    connectOrCreate?: AccountantCreateOrConnectWithoutClientsInput
    connect?: AccountantWhereUniqueInput
  }

  export type FiscalMonthCreateNestedManyWithoutClientInput = {
    create?: XOR<FiscalMonthCreateWithoutClientInput, FiscalMonthUncheckedCreateWithoutClientInput> | FiscalMonthCreateWithoutClientInput[] | FiscalMonthUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FiscalMonthCreateOrConnectWithoutClientInput | FiscalMonthCreateOrConnectWithoutClientInput[]
    createMany?: FiscalMonthCreateManyClientInputEnvelope
    connect?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
  }

  export type FiscalMonthUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<FiscalMonthCreateWithoutClientInput, FiscalMonthUncheckedCreateWithoutClientInput> | FiscalMonthCreateWithoutClientInput[] | FiscalMonthUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FiscalMonthCreateOrConnectWithoutClientInput | FiscalMonthCreateOrConnectWithoutClientInput[]
    createMany?: FiscalMonthCreateManyClientInputEnvelope
    connect?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AccountantUpdateOneRequiredWithoutClientsNestedInput = {
    create?: XOR<AccountantCreateWithoutClientsInput, AccountantUncheckedCreateWithoutClientsInput>
    connectOrCreate?: AccountantCreateOrConnectWithoutClientsInput
    upsert?: AccountantUpsertWithoutClientsInput
    connect?: AccountantWhereUniqueInput
    update?: XOR<XOR<AccountantUpdateToOneWithWhereWithoutClientsInput, AccountantUpdateWithoutClientsInput>, AccountantUncheckedUpdateWithoutClientsInput>
  }

  export type FiscalMonthUpdateManyWithoutClientNestedInput = {
    create?: XOR<FiscalMonthCreateWithoutClientInput, FiscalMonthUncheckedCreateWithoutClientInput> | FiscalMonthCreateWithoutClientInput[] | FiscalMonthUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FiscalMonthCreateOrConnectWithoutClientInput | FiscalMonthCreateOrConnectWithoutClientInput[]
    upsert?: FiscalMonthUpsertWithWhereUniqueWithoutClientInput | FiscalMonthUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: FiscalMonthCreateManyClientInputEnvelope
    set?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
    disconnect?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
    delete?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
    connect?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
    update?: FiscalMonthUpdateWithWhereUniqueWithoutClientInput | FiscalMonthUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: FiscalMonthUpdateManyWithWhereWithoutClientInput | FiscalMonthUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: FiscalMonthScalarWhereInput | FiscalMonthScalarWhereInput[]
  }

  export type FiscalMonthUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<FiscalMonthCreateWithoutClientInput, FiscalMonthUncheckedCreateWithoutClientInput> | FiscalMonthCreateWithoutClientInput[] | FiscalMonthUncheckedCreateWithoutClientInput[]
    connectOrCreate?: FiscalMonthCreateOrConnectWithoutClientInput | FiscalMonthCreateOrConnectWithoutClientInput[]
    upsert?: FiscalMonthUpsertWithWhereUniqueWithoutClientInput | FiscalMonthUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: FiscalMonthCreateManyClientInputEnvelope
    set?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
    disconnect?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
    delete?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
    connect?: FiscalMonthWhereUniqueInput | FiscalMonthWhereUniqueInput[]
    update?: FiscalMonthUpdateWithWhereUniqueWithoutClientInput | FiscalMonthUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: FiscalMonthUpdateManyWithWhereWithoutClientInput | FiscalMonthUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: FiscalMonthScalarWhereInput | FiscalMonthScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutFiscalMonthsInput = {
    create?: XOR<ClientCreateWithoutFiscalMonthsInput, ClientUncheckedCreateWithoutFiscalMonthsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutFiscalMonthsInput
    connect?: ClientWhereUniqueInput
  }

  export type BankOperationCreateNestedManyWithoutFiscalMonthInput = {
    create?: XOR<BankOperationCreateWithoutFiscalMonthInput, BankOperationUncheckedCreateWithoutFiscalMonthInput> | BankOperationCreateWithoutFiscalMonthInput[] | BankOperationUncheckedCreateWithoutFiscalMonthInput[]
    connectOrCreate?: BankOperationCreateOrConnectWithoutFiscalMonthInput | BankOperationCreateOrConnectWithoutFiscalMonthInput[]
    createMany?: BankOperationCreateManyFiscalMonthInputEnvelope
    connect?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
  }

  export type BankOperationUncheckedCreateNestedManyWithoutFiscalMonthInput = {
    create?: XOR<BankOperationCreateWithoutFiscalMonthInput, BankOperationUncheckedCreateWithoutFiscalMonthInput> | BankOperationCreateWithoutFiscalMonthInput[] | BankOperationUncheckedCreateWithoutFiscalMonthInput[]
    connectOrCreate?: BankOperationCreateOrConnectWithoutFiscalMonthInput | BankOperationCreateOrConnectWithoutFiscalMonthInput[]
    createMany?: BankOperationCreateManyFiscalMonthInputEnvelope
    connect?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClientUpdateOneRequiredWithoutFiscalMonthsNestedInput = {
    create?: XOR<ClientCreateWithoutFiscalMonthsInput, ClientUncheckedCreateWithoutFiscalMonthsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutFiscalMonthsInput
    upsert?: ClientUpsertWithoutFiscalMonthsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutFiscalMonthsInput, ClientUpdateWithoutFiscalMonthsInput>, ClientUncheckedUpdateWithoutFiscalMonthsInput>
  }

  export type BankOperationUpdateManyWithoutFiscalMonthNestedInput = {
    create?: XOR<BankOperationCreateWithoutFiscalMonthInput, BankOperationUncheckedCreateWithoutFiscalMonthInput> | BankOperationCreateWithoutFiscalMonthInput[] | BankOperationUncheckedCreateWithoutFiscalMonthInput[]
    connectOrCreate?: BankOperationCreateOrConnectWithoutFiscalMonthInput | BankOperationCreateOrConnectWithoutFiscalMonthInput[]
    upsert?: BankOperationUpsertWithWhereUniqueWithoutFiscalMonthInput | BankOperationUpsertWithWhereUniqueWithoutFiscalMonthInput[]
    createMany?: BankOperationCreateManyFiscalMonthInputEnvelope
    set?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
    disconnect?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
    delete?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
    connect?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
    update?: BankOperationUpdateWithWhereUniqueWithoutFiscalMonthInput | BankOperationUpdateWithWhereUniqueWithoutFiscalMonthInput[]
    updateMany?: BankOperationUpdateManyWithWhereWithoutFiscalMonthInput | BankOperationUpdateManyWithWhereWithoutFiscalMonthInput[]
    deleteMany?: BankOperationScalarWhereInput | BankOperationScalarWhereInput[]
  }

  export type BankOperationUncheckedUpdateManyWithoutFiscalMonthNestedInput = {
    create?: XOR<BankOperationCreateWithoutFiscalMonthInput, BankOperationUncheckedCreateWithoutFiscalMonthInput> | BankOperationCreateWithoutFiscalMonthInput[] | BankOperationUncheckedCreateWithoutFiscalMonthInput[]
    connectOrCreate?: BankOperationCreateOrConnectWithoutFiscalMonthInput | BankOperationCreateOrConnectWithoutFiscalMonthInput[]
    upsert?: BankOperationUpsertWithWhereUniqueWithoutFiscalMonthInput | BankOperationUpsertWithWhereUniqueWithoutFiscalMonthInput[]
    createMany?: BankOperationCreateManyFiscalMonthInputEnvelope
    set?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
    disconnect?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
    delete?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
    connect?: BankOperationWhereUniqueInput | BankOperationWhereUniqueInput[]
    update?: BankOperationUpdateWithWhereUniqueWithoutFiscalMonthInput | BankOperationUpdateWithWhereUniqueWithoutFiscalMonthInput[]
    updateMany?: BankOperationUpdateManyWithWhereWithoutFiscalMonthInput | BankOperationUpdateManyWithWhereWithoutFiscalMonthInput[]
    deleteMany?: BankOperationScalarWhereInput | BankOperationScalarWhereInput[]
  }

  export type FiscalMonthCreateNestedOneWithoutOperationsInput = {
    create?: XOR<FiscalMonthCreateWithoutOperationsInput, FiscalMonthUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: FiscalMonthCreateOrConnectWithoutOperationsInput
    connect?: FiscalMonthWhereUniqueInput
  }

  export type FiscalMonthUpdateOneRequiredWithoutOperationsNestedInput = {
    create?: XOR<FiscalMonthCreateWithoutOperationsInput, FiscalMonthUncheckedCreateWithoutOperationsInput>
    connectOrCreate?: FiscalMonthCreateOrConnectWithoutOperationsInput
    upsert?: FiscalMonthUpsertWithoutOperationsInput
    connect?: FiscalMonthWhereUniqueInput
    update?: XOR<XOR<FiscalMonthUpdateToOneWithWhereWithoutOperationsInput, FiscalMonthUpdateWithoutOperationsInput>, FiscalMonthUncheckedUpdateWithoutOperationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ClientCreateWithoutAccountantInput = {
    pictureUrl?: string | null
    name: string
    fiscalMonths?: FiscalMonthCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutAccountantInput = {
    id?: number
    pictureUrl?: string | null
    name: string
    fiscalMonths?: FiscalMonthUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutAccountantInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutAccountantInput, ClientUncheckedCreateWithoutAccountantInput>
  }

  export type ClientCreateManyAccountantInputEnvelope = {
    data: ClientCreateManyAccountantInput | ClientCreateManyAccountantInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithWhereUniqueWithoutAccountantInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutAccountantInput, ClientUncheckedUpdateWithoutAccountantInput>
    create: XOR<ClientCreateWithoutAccountantInput, ClientUncheckedCreateWithoutAccountantInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutAccountantInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutAccountantInput, ClientUncheckedUpdateWithoutAccountantInput>
  }

  export type ClientUpdateManyWithWhereWithoutAccountantInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutAccountantInput>
  }

  export type ClientScalarWhereInput = {
    AND?: ClientScalarWhereInput | ClientScalarWhereInput[]
    OR?: ClientScalarWhereInput[]
    NOT?: ClientScalarWhereInput | ClientScalarWhereInput[]
    id?: IntFilter<"Client"> | number
    pictureUrl?: StringNullableFilter<"Client"> | string | null
    name?: StringFilter<"Client"> | string
    accountantId?: IntFilter<"Client"> | number
  }

  export type AccountantCreateWithoutClientsInput = {
    email: string
    password: string
  }

  export type AccountantUncheckedCreateWithoutClientsInput = {
    id?: number
    email: string
    password: string
  }

  export type AccountantCreateOrConnectWithoutClientsInput = {
    where: AccountantWhereUniqueInput
    create: XOR<AccountantCreateWithoutClientsInput, AccountantUncheckedCreateWithoutClientsInput>
  }

  export type FiscalMonthCreateWithoutClientInput = {
    date: Date | string
    controlBalance?: number | null
    controlBankStatementUrl?: string | null
    operations?: BankOperationCreateNestedManyWithoutFiscalMonthInput
  }

  export type FiscalMonthUncheckedCreateWithoutClientInput = {
    id?: number
    date: Date | string
    controlBalance?: number | null
    controlBankStatementUrl?: string | null
    operations?: BankOperationUncheckedCreateNestedManyWithoutFiscalMonthInput
  }

  export type FiscalMonthCreateOrConnectWithoutClientInput = {
    where: FiscalMonthWhereUniqueInput
    create: XOR<FiscalMonthCreateWithoutClientInput, FiscalMonthUncheckedCreateWithoutClientInput>
  }

  export type FiscalMonthCreateManyClientInputEnvelope = {
    data: FiscalMonthCreateManyClientInput | FiscalMonthCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type AccountantUpsertWithoutClientsInput = {
    update: XOR<AccountantUpdateWithoutClientsInput, AccountantUncheckedUpdateWithoutClientsInput>
    create: XOR<AccountantCreateWithoutClientsInput, AccountantUncheckedCreateWithoutClientsInput>
    where?: AccountantWhereInput
  }

  export type AccountantUpdateToOneWithWhereWithoutClientsInput = {
    where?: AccountantWhereInput
    data: XOR<AccountantUpdateWithoutClientsInput, AccountantUncheckedUpdateWithoutClientsInput>
  }

  export type AccountantUpdateWithoutClientsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AccountantUncheckedUpdateWithoutClientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type FiscalMonthUpsertWithWhereUniqueWithoutClientInput = {
    where: FiscalMonthWhereUniqueInput
    update: XOR<FiscalMonthUpdateWithoutClientInput, FiscalMonthUncheckedUpdateWithoutClientInput>
    create: XOR<FiscalMonthCreateWithoutClientInput, FiscalMonthUncheckedCreateWithoutClientInput>
  }

  export type FiscalMonthUpdateWithWhereUniqueWithoutClientInput = {
    where: FiscalMonthWhereUniqueInput
    data: XOR<FiscalMonthUpdateWithoutClientInput, FiscalMonthUncheckedUpdateWithoutClientInput>
  }

  export type FiscalMonthUpdateManyWithWhereWithoutClientInput = {
    where: FiscalMonthScalarWhereInput
    data: XOR<FiscalMonthUpdateManyMutationInput, FiscalMonthUncheckedUpdateManyWithoutClientInput>
  }

  export type FiscalMonthScalarWhereInput = {
    AND?: FiscalMonthScalarWhereInput | FiscalMonthScalarWhereInput[]
    OR?: FiscalMonthScalarWhereInput[]
    NOT?: FiscalMonthScalarWhereInput | FiscalMonthScalarWhereInput[]
    id?: IntFilter<"FiscalMonth"> | number
    date?: DateTimeFilter<"FiscalMonth"> | Date | string
    clientId?: IntFilter<"FiscalMonth"> | number
    controlBalance?: IntNullableFilter<"FiscalMonth"> | number | null
    controlBankStatementUrl?: StringNullableFilter<"FiscalMonth"> | string | null
  }

  export type ClientCreateWithoutFiscalMonthsInput = {
    pictureUrl?: string | null
    name: string
    accountant: AccountantCreateNestedOneWithoutClientsInput
  }

  export type ClientUncheckedCreateWithoutFiscalMonthsInput = {
    id?: number
    pictureUrl?: string | null
    name: string
    accountantId: number
  }

  export type ClientCreateOrConnectWithoutFiscalMonthsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutFiscalMonthsInput, ClientUncheckedCreateWithoutFiscalMonthsInput>
  }

  export type BankOperationCreateWithoutFiscalMonthInput = {
    createdAt: Date | string
    wording: string
    amount: number
  }

  export type BankOperationUncheckedCreateWithoutFiscalMonthInput = {
    id?: number
    createdAt: Date | string
    wording: string
    amount: number
  }

  export type BankOperationCreateOrConnectWithoutFiscalMonthInput = {
    where: BankOperationWhereUniqueInput
    create: XOR<BankOperationCreateWithoutFiscalMonthInput, BankOperationUncheckedCreateWithoutFiscalMonthInput>
  }

  export type BankOperationCreateManyFiscalMonthInputEnvelope = {
    data: BankOperationCreateManyFiscalMonthInput | BankOperationCreateManyFiscalMonthInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutFiscalMonthsInput = {
    update: XOR<ClientUpdateWithoutFiscalMonthsInput, ClientUncheckedUpdateWithoutFiscalMonthsInput>
    create: XOR<ClientCreateWithoutFiscalMonthsInput, ClientUncheckedCreateWithoutFiscalMonthsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutFiscalMonthsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutFiscalMonthsInput, ClientUncheckedUpdateWithoutFiscalMonthsInput>
  }

  export type ClientUpdateWithoutFiscalMonthsInput = {
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    accountant?: AccountantUpdateOneRequiredWithoutClientsNestedInput
  }

  export type ClientUncheckedUpdateWithoutFiscalMonthsInput = {
    id?: IntFieldUpdateOperationsInput | number
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    accountantId?: IntFieldUpdateOperationsInput | number
  }

  export type BankOperationUpsertWithWhereUniqueWithoutFiscalMonthInput = {
    where: BankOperationWhereUniqueInput
    update: XOR<BankOperationUpdateWithoutFiscalMonthInput, BankOperationUncheckedUpdateWithoutFiscalMonthInput>
    create: XOR<BankOperationCreateWithoutFiscalMonthInput, BankOperationUncheckedCreateWithoutFiscalMonthInput>
  }

  export type BankOperationUpdateWithWhereUniqueWithoutFiscalMonthInput = {
    where: BankOperationWhereUniqueInput
    data: XOR<BankOperationUpdateWithoutFiscalMonthInput, BankOperationUncheckedUpdateWithoutFiscalMonthInput>
  }

  export type BankOperationUpdateManyWithWhereWithoutFiscalMonthInput = {
    where: BankOperationScalarWhereInput
    data: XOR<BankOperationUpdateManyMutationInput, BankOperationUncheckedUpdateManyWithoutFiscalMonthInput>
  }

  export type BankOperationScalarWhereInput = {
    AND?: BankOperationScalarWhereInput | BankOperationScalarWhereInput[]
    OR?: BankOperationScalarWhereInput[]
    NOT?: BankOperationScalarWhereInput | BankOperationScalarWhereInput[]
    id?: IntFilter<"BankOperation"> | number
    createdAt?: DateTimeFilter<"BankOperation"> | Date | string
    wording?: StringFilter<"BankOperation"> | string
    amount?: IntFilter<"BankOperation"> | number
    fiscalMonthId?: IntFilter<"BankOperation"> | number
  }

  export type FiscalMonthCreateWithoutOperationsInput = {
    date: Date | string
    controlBalance?: number | null
    controlBankStatementUrl?: string | null
    client: ClientCreateNestedOneWithoutFiscalMonthsInput
  }

  export type FiscalMonthUncheckedCreateWithoutOperationsInput = {
    id?: number
    date: Date | string
    clientId: number
    controlBalance?: number | null
    controlBankStatementUrl?: string | null
  }

  export type FiscalMonthCreateOrConnectWithoutOperationsInput = {
    where: FiscalMonthWhereUniqueInput
    create: XOR<FiscalMonthCreateWithoutOperationsInput, FiscalMonthUncheckedCreateWithoutOperationsInput>
  }

  export type FiscalMonthUpsertWithoutOperationsInput = {
    update: XOR<FiscalMonthUpdateWithoutOperationsInput, FiscalMonthUncheckedUpdateWithoutOperationsInput>
    create: XOR<FiscalMonthCreateWithoutOperationsInput, FiscalMonthUncheckedCreateWithoutOperationsInput>
    where?: FiscalMonthWhereInput
  }

  export type FiscalMonthUpdateToOneWithWhereWithoutOperationsInput = {
    where?: FiscalMonthWhereInput
    data: XOR<FiscalMonthUpdateWithoutOperationsInput, FiscalMonthUncheckedUpdateWithoutOperationsInput>
  }

  export type FiscalMonthUpdateWithoutOperationsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    controlBalance?: NullableIntFieldUpdateOperationsInput | number | null
    controlBankStatementUrl?: NullableStringFieldUpdateOperationsInput | string | null
    client?: ClientUpdateOneRequiredWithoutFiscalMonthsNestedInput
  }

  export type FiscalMonthUncheckedUpdateWithoutOperationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: IntFieldUpdateOperationsInput | number
    controlBalance?: NullableIntFieldUpdateOperationsInput | number | null
    controlBankStatementUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClientCreateManyAccountantInput = {
    id?: number
    pictureUrl?: string | null
    name: string
  }

  export type ClientUpdateWithoutAccountantInput = {
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    fiscalMonths?: FiscalMonthUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutAccountantInput = {
    id?: IntFieldUpdateOperationsInput | number
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    fiscalMonths?: FiscalMonthUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutAccountantInput = {
    id?: IntFieldUpdateOperationsInput | number
    pictureUrl?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
  }

  export type FiscalMonthCreateManyClientInput = {
    id?: number
    date: Date | string
    controlBalance?: number | null
    controlBankStatementUrl?: string | null
  }

  export type FiscalMonthUpdateWithoutClientInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    controlBalance?: NullableIntFieldUpdateOperationsInput | number | null
    controlBankStatementUrl?: NullableStringFieldUpdateOperationsInput | string | null
    operations?: BankOperationUpdateManyWithoutFiscalMonthNestedInput
  }

  export type FiscalMonthUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    controlBalance?: NullableIntFieldUpdateOperationsInput | number | null
    controlBankStatementUrl?: NullableStringFieldUpdateOperationsInput | string | null
    operations?: BankOperationUncheckedUpdateManyWithoutFiscalMonthNestedInput
  }

  export type FiscalMonthUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    controlBalance?: NullableIntFieldUpdateOperationsInput | number | null
    controlBankStatementUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BankOperationCreateManyFiscalMonthInput = {
    id?: number
    createdAt: Date | string
    wording: string
    amount: number
  }

  export type BankOperationUpdateWithoutFiscalMonthInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wording?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type BankOperationUncheckedUpdateWithoutFiscalMonthInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wording?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
  }

  export type BankOperationUncheckedUpdateManyWithoutFiscalMonthInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wording?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AccountantCountOutputTypeDefaultArgs instead
     */
    export type AccountantCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AccountantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientCountOutputTypeDefaultArgs instead
     */
    export type ClientCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ClientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FiscalMonthCountOutputTypeDefaultArgs instead
     */
    export type FiscalMonthCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FiscalMonthCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountantDefaultArgs instead
     */
    export type AccountantArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AccountantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientDefaultArgs instead
     */
    export type ClientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ClientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FiscalMonthDefaultArgs instead
     */
    export type FiscalMonthArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FiscalMonthDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BankOperationDefaultArgs instead
     */
    export type BankOperationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = BankOperationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}